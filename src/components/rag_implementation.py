import streamlit as st

# === PAGE 2 : Impl√©mentation RAG ===
def rag_implementation():
    """Affiche la page d'impl√©mentation RAG de l'application."""

    st.header("üîç Impl√©mentation RAG et Donn√©es Culinaires")
    st.markdown("""
    ### **üìå Contexte**
    Cette section explore comment nous avons impl√©ment√© la G√©n√©ration Augment√©e par R√©cup√©ration (RAG) pour alimenter notre Assistant de Cuisine. RAG permet au chatbot d'acc√©der et d'utiliser une vaste base de connaissances d'informations culinaires, garantissant que ses r√©ponses sont pr√©cises, pertinentes et informatives.

    ### **üéØ Objectif**
    Notre objectif principal avec RAG est d'am√©liorer la capacit√© du chatbot √† :
    - R√©cup√©rer des recettes et des techniques de cuisine sp√©cifiques.
    - Comprendre les requ√™tes des utilisateurs relatives aux ingr√©dients, aux cuisines et aux restrictions alimentaires.
    - G√©n√©rer des r√©ponses utiles et contextuellement appropri√©es.

    ---

    ### **‚öôÔ∏è Comment √ßa Marche**
    L'impl√©mentation RAG implique plusieurs √©tapes cl√©s :
    1. **Ingestion des Donn√©es :** Nous collectons des donn√©es √† partir du site marmiton, a l'aide d'un cooking scrapper qui scrape +460 site de cuisine.
    2. **Pr√©traitement des Donn√©es :** Les donn√©es collect√©es sont nettoy√©es, format√©es et structur√©es en json pour une r√©cup√©ration efficace. Puis divise en chunk sans couper leur structure initiale.
    3. **Vectorisation :**  Nous avons essaye plusieurs techniques de vectorisation, nous avons choisis **text-embedding-004** avec un task type = **semantic_similarity** permettant des recherches de similarit√© s√©mantique.
    4. **Base de Donn√©es Vectorielle :** Les donn√©es vectoris√©es sont stock√©es dans une base de donn√©es **Chroma** qui est persistante.
    5. **R√©cup√©ration :** Lorsqu'un utilisateur pose une question, le syst√®me r√©cup√®re les informations les plus pertinentes de la base de donn√©es vectorielle puis les integre dans un prompt specifique a la cuisine.
    6. **G√©n√©ration :** Les informations r√©cup√©r√©es sont ensuite transmises √† un Grand Mod√®le de Langage (LLM), qui g√©n√®re une r√©ponse coh√©rente et informative.

    ---

    ### **üõ†Ô∏è Notre Approche**
    Nous utilisons une combinaison de techniques, notamment :

    - **Large Langage Model (LLM) :** gemini-2.0-flash, Mistral
    - **Bases de Donn√©es Vectorielles :** ChromaDB, Pinecone, Weaviate
    - **Web Scraping (Potentiellement) :** Pour collecter des donn√©es √† partir de sites web de cuisine et de bases de donn√©es de recettes.

    Explorez les diff√©rentes sections de notre application pour voir l'Assistant de Cuisine en action ! üöÄ
    """)
